generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model book {
  id_book   Int      @id @default(autoincrement())
  title     String   @unique(map: "book_unique") @db.VarChar(100)
  author    String   @db.VarChar(100)
  published DateTime @db.Date
  id_genre  Int
  uuid      String?  @db.VarChar(200)
  stock     Int?
  genre     genre    @relation(fields: [id_genre], references: [id_genre], onDelete: NoAction, onUpdate: NoAction, map: "fk_genre")
  borrow    borrow[]
}

model genre {
  id_genre Int     @id @default(autoincrement())
  genre    String? @db.VarChar(20)
  book     book[]
}

model role {
  id_role Int     @id @default(autoincrement())
  role    String? @db.VarChar(20)
  users   users[]
}

model users {
  id_user    Int      @id @default(autoincrement())
  first_name String   @db.VarChar(100)
  last_name  String   @db.VarChar(100)
  email      String   @unique(map: "unique_constraint") @db.VarChar(100)
  id_role    Int
  uuid       String?  @db.VarChar(200)
  borrow     borrow[]
  role       role     @relation(fields: [id_role], references: [id_role], onDelete: NoAction, onUpdate: NoAction, map: "fk_role")
}

model borrow {
  id_borrow Int       @id @default(autoincrement())
  id_user   Int?
  id_book   Int?
  from_date DateTime? @db.Date
  to_date   DateTime? @db.Date
  state     String?   @db.VarChar(30)
  book      book?     @relation(fields: [id_book], references: [id_book], onDelete: NoAction, onUpdate: NoAction, map: "fk_book")
  users     users?    @relation(fields: [id_user], references: [id_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")
}
